---
# file: create-vms/tasks/main.yml

- name: create Virtual Machines with uvt-kvm
  shell: uvt-kvm create {{ item.name }} release={{ ansible_distribution_release }} \
    --cpu={{ item.cpu }} --memory={{ item.memMB }} --disk={{ item.diskGB }} --bridge="mgmtbr"
    creates=/var/lib/uvtool/libvirt/images/{{ item.name }}.qcow
  with_items: "{{ head_vm_list }}"

- name: Have VMs autostart on reboot
  become: yes
  virt:
    name={{ item.name }}
    command=autostart
  with_items: "{{ head_vm_list }}"

- name: wait for VM's to come up
  wait_for:
    host={{ item.name }}
    port=22
  with_items: "{{ head_vm_list }}"

- name: Create /etc/ansible/hosts file
  become: yes
  template:
    src=ansible_hosts.j2
    dest=/etc/ansible/hosts

- name: Verify that we can log into every VM
  command: ansible services -m ping -u ubuntu

- name: Have VM's use the apt-cache
  command: ansible services -b -u ubuntu -m lineinfile -a "dest=/etc/apt/apt.conf.d/02apt-cacher-ng create=yes mode=0644 owner=root group=root regexp='^Acquire' line='Acquire::http { Proxy \"http://{{ apt_cacher_name }}:{{ apt_cacher_port | default('3142') }}\"; };'"

- name: Update software in all the VMs
  command: ansible services -m apt -b -u ubuntu -a "upgrade=dist update_cache=yes cache_valid_time=3600"

- name: Create VM's eth0 interface config file for DNS config via resolvconf program
  template:
    src=eth0.cfg.j2
    dest={{ ansible_user_dir }}/eth0.cfg

- name: Copy eth0 interface config file to all VMs
  command: ansible services -b -u ubuntu -m copy -a "src={{ ansible_user_dir }}/eth0.cfg dest=/etc/network/interfaces.d/eth0.cfg owner=root group=root mode=0644"

- name: Restart eth0 interface on all VMs
  command: ansible services -b -u ubuntu -m shell -a "ifdown eth0 ; ifup eth0"

- name: Verify that we can log into every VM after restarting network interfaces
  command: ansible services -m ping -u ubuntu

# sshkey is registered in head-prep task
- name: Enable root ssh login on VM's that require it
  command: ansible {{ item.name }} -b -u ubuntu -m authorized_key -a "user='root' key='{{ sshkey.stdout }}'"
  with_items: "{{ head_vm_list | selectattr('root_ssh_login', 'defined') | list }}"

- name: Copy over docker installation playbook and docker apt-key
  copy:
    src="{{ item }}"
    dest="{{ ansible_user_dir }}/{{ item }}"
  with_items:
    - "docker-install-playbook.yml"
    - "docker_apt_key.gpg"

- name: Install docker in VM's that require it
  command: ansible-playbook "{{ ansible_user_dir }}/docker-install-playbook.yml"

